{"ast":null,"code":"var _jsxFileName = \"/Users/PravinSelvarajah/Documents/GitHub/Learning_React/React_JS_Tutorial/frontend_login/src/components/LoginForm.js\";\nimport React from 'react';\nimport InputField from './InputFile';\nimport SubmitButton from './SubmitButton';\nimport UserStore from '../stores/UserStore';\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      buttonDisabled: false\n    };\n  }\n\n  setInputValue(property, val) {\n    val = val.trim();\n\n    if (val.length > 12) {\n      return;\n    }\n\n    this.setState({\n      [property]: val\n    });\n  }\n\n  resetForm() {\n    this.setState({\n      username: '',\n      password: '',\n      buttonDisabled: false\n    });\n  } // API\n\n\n  async doLogin() {\n    if (!this.state.username) {\n      return;\n    }\n\n    if (!this.state.password) {\n      return;\n    }\n\n    this.setState({\n      buttonDisabled: true\n    });\n\n    try {\n      let res = await fetch('/login', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      });\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      } else if (result && result.success === false) {\n        this.resetForm();\n        alert(result.msg);\n      }\n    } catch (e) {\n      console.log(e);\n      this.resetForm();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, \"Log in\", /*#__PURE__*/React.createElement(InputField, {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: this.state.username ? this.state.username : '',\n      onChange: val => this.setInputValue('username', val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(InputField, {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: this.state.password ? this.state.password : '',\n      onChange: val => this.setInputValue('password', val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(SubmitButton, {\n      text: \"Login\",\n      disabled: this.state.buttonDisabled,\n      onClick: () => this.doLogin(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/PravinSelvarajah/Documents/GitHub/Learning_React/React_JS_Tutorial/frontend_login/src/components/LoginForm.js"],"names":["React","InputField","SubmitButton","UserStore","LoginForm","Component","constructor","props","state","username","password","buttonDisabled","setInputValue","property","val","trim","length","setState","resetForm","doLogin","res","fetch","method","headers","body","JSON","stringify","result","json","success","isLoggedIn","alert","msg","e","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InputField from './InputFile';\nimport SubmitButton from './SubmitButton';\nimport UserStore from '../stores/UserStore';\n\n\nclass LoginForm extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      buttonDisabled: false\n    } \n  }\n\n  setInputValue(property, val) {\n    val = val.trim();\n    if (val.length > 12) {\n      return;\n    }\n    this.setState({\n      [property]: val\n    })\n  }\n\n  resetForm() {\n    this.setState({\n      username: '',\n      password: '',\n      buttonDisabled: false\n    })\n  }\n\n  // API\n\n  async doLogin() {\n\n    if (!this.state.username){\n      return;\n    }\n    if (!this.state.password){\n      return;\n    }\n\n    this.setState({\n      buttonDisabled: true\n    })\n\n    try {\n        let res = await fetch('/login', {\n          method: 'post',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: this.state.username,\n            password: this.state.password\n          })\n      });\n\n      let result = await res.json();\n      if (result && result.success) {\n          UserStore.isLoggedIn = true;\n          UserStore.username = result.username;\n      }\n      else if (result && result.success === false) {\n        this.resetForm();\n        alert(result.msg);\n      }\n    }\n\n    catch(e){\n      console.log(e);\n      this.resetForm();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"loginForm\">\n          Log in\n          <InputField \n            type='text'\n            placeholder='Username'\n            value={this.state.username ? this.state.username: ''}\n            onChange={(val) => this.setInputValue('username', val) }\n\n          />\n          <InputField \n            type='password'\n            placeholder='Password'\n            value={this.state.password ? this.state.password: ''}\n            onChange={ (val) => this.setInputValue('password', val) }\n          />\n          <SubmitButton\n            text='Login'\n            disabled={this.state.buttonDisabled}\n            onClick={ () => this.doLogin() }\n          />\n         \n      </div>\n    );\n\n  }\n}\n\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}